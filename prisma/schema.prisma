generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Domain {
    verifyingContract String
    name              String
    version           String
    chainId           Int

    pins  Pin[]
    plugs Plugs[]

    @@id([verifyingContract, name, version, chainId])
}

model Fuse {
    neutral String
    live    String

    pins FusesOnPin[]

    @@id([neutral, live])
}

model FusesOnPin {
    pinId       String
    fuseNeutral String
    fuseLive    String

    pin  Pin  @relation(fields: [pinId], references: [id])
    fuse Fuse @relation(fields: [fuseNeutral, fuseLive], references: [neutral, live])

    @@id([pinId, fuseNeutral, fuseLive])
}

model Pin {
    id String @id

    domain                  Domain       @relation(fields: [domainVerifyingContract, domainName, domainVersion, domainChainId], references: [verifyingContract, name, version, chainId])
    domainVerifyingContract String
    domainName              String
    domainVersion           String
    domainChainId           Int
    neutral                 String
    live                    String
    salt                    String
    fuses                   FusesOnPin[]

    signedPins LivePin[]
}

model LivePin {
    pin   Pin    @relation(fields: [pinId], references: [id])
    pinId String

    signature String

    plugs LivePinOnPlug[]

    address   Address @relation(fields: [addressId], references: [id])
    addressId String

    @@id([pinId, signature])
}

model Current {
    ground  String
    voltage BigInt
    data    String

    plugs Plug[]

    @@id([ground, voltage, data])
}

model LivePinOnPlug {
    livePin          LivePin @relation(fields: [livePinId, livePinSignature], references: [pinId, signature])
    livePinId        String
    livePinSignature String
    plug             Plug    @relation(fields: [plugId], references: [id])
    plugId           String

    @@id([livePinId, livePinSignature, plugId])
}

model Plug {
    id String @id

    current        Current         @relation(fields: [currentGround, currentVoltage, currentData], references: [ground, voltage, data])
    currentGround  String
    currentVoltage BigInt
    currentData    String
    pins           LivePinOnPlug[]

    plugs PlugOnPlugs[]
}

model Breaker {
    nonce BigInt
    queue BigInt

    plugs Plugs[]

    @@id([nonce, queue])
}

model PlugOnPlugs {
    plug    Plug   @relation(fields: [plugId], references: [id])
    plugId  String
    plugs   Plugs  @relation(fields: [plugsId], references: [id])
    plugsId String

    @@id([plugId, plugsId])
}

model Plugs {
    id String @id

    domain                  Domain        @relation(fields: [domainVerifyingContract, domainName, domainVersion, domainChainId], references: [verifyingContract, name, version, chainId])
    domainVerifyingContract String
    domainName              String
    domainVersion           String
    domainChainId           Int
    plugs                   PlugOnPlugs[]
    breaker                 Breaker       @relation(fields: [breakerNonce, breakerQueue], references: [nonce, queue])
    breakerNonce            BigInt
    breakerQueue            BigInt

    signedPlugs LivePlugs[]
}

model LivePlugs {
    plugs     Plugs  @relation(fields: [plugsId], references: [id])
    plugsId   String
    signature String

    address   Address @relation(fields: [addressId], references: [id])
    addressId String

    @@id([plugsId, signature])
}

model Address {
    id String @id

    signedPins  LivePin[]
    signedPlugs LivePlugs[]
}
